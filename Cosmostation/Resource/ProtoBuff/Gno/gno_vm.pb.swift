// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: gno/vm.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// MsgCall is the method invocation tx message,
/// denoted as "m_call"
struct Gno_Vm_MsgCall {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// the bech32 address of the caller
  var caller: String = String()

  /// the amount of funds to be deposited to the package, if any ("<amount><denomination>")
  var send: String = String()

  /// the amount of funds to lock for the storage, if any ("<amount><denomination>")
  var maxDeposit: String = String()

  /// the gno package path
  var pkgPath: String = String()

  /// the function name being invoked
  var `func`: String = String()

  /// the function arguments
  var args: [String] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgAddPackage is the package deployment tx message,
/// denoted as "m_addpkg"
struct Gno_Vm_MsgAddPackage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// the package deployer
  var creator: String = String()

  /// the package being deployed
  var package: Gno_Vm_MemPackage {
    get {return _package ?? Gno_Vm_MemPackage()}
    set {_package = newValue}
  }
  /// Returns true if `package` has been explicitly set.
  var hasPackage: Bool {return self._package != nil}
  /// Clears the value of `package`. Subsequent reads from it will return its default value.
  mutating func clearPackage() {self._package = nil}

  /// the amount of funds to be deposited at deployment, if any ("<amount><denomination>")
  var send: String = String()

  /// the amount of funds to put down for the storage fee, if any ("<amount><denomination>")
  var maxDeposit: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _package: Gno_Vm_MemPackage? = nil
}

/// MsgRun is the execute arbitrary Gno code tx message,
/// denoted as "m_run"
struct Gno_Vm_MsgRun {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// the bech32 address of the caller
  var caller: String = String()

  /// the amount of funds to be deposited to the package, if any ("<amount><denomination>")
  var send: String = String()

  /// the amount of funds to put down for the storage fee, if any ("<amount><denomination>")
  var maxDeposit: String = String()

  /// the package being executed
  var package: Gno_Vm_MemPackage {
    get {return _package ?? Gno_Vm_MemPackage()}
    set {_package = newValue}
  }
  /// Returns true if `package` has been explicitly set.
  var hasPackage: Bool {return self._package != nil}
  /// Clears the value of `package`. Subsequent reads from it will return its default value.
  mutating func clearPackage() {self._package = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _package: Gno_Vm_MemPackage? = nil
}

/// MemPackage is the metadata information tied to
/// package / realm deployment
struct Gno_Vm_MemPackage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// the name of the package
  var name: String = String()

  /// the gno path of the package
  var path: String = String()

  /// the associated package gno source
  var files: [Gno_Vm_MemFile] = []

  /// the (user defined) package type
  var type: SwiftProtobuf.Google_Protobuf_Any {
    get {return _type ?? SwiftProtobuf.Google_Protobuf_Any()}
    set {_type = newValue}
  }
  /// Returns true if `type` has been explicitly set.
  var hasType: Bool {return self._type != nil}
  /// Clears the value of `type`. Subsequent reads from it will return its default value.
  mutating func clearType() {self._type = nil}

  /// the (user defined) extra information
  var info: SwiftProtobuf.Google_Protobuf_Any {
    get {return _info ?? SwiftProtobuf.Google_Protobuf_Any()}
    set {_info = newValue}
  }
  /// Returns true if `info` has been explicitly set.
  var hasInfo: Bool {return self._info != nil}
  /// Clears the value of `info`. Subsequent reads from it will return its default value.
  mutating func clearInfo() {self._info = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _type: SwiftProtobuf.Google_Protobuf_Any? = nil
  fileprivate var _info: SwiftProtobuf.Google_Protobuf_Any? = nil
}

/// MemFile is the metadata information tied to
/// a single gno package / realm file
struct Gno_Vm_MemFile {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// the name of the source gno file
  var name: String = String()

  /// the content of the source gno file
  var body: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Gno_Vm_MsgCall: @unchecked Sendable {}
extension Gno_Vm_MsgAddPackage: @unchecked Sendable {}
extension Gno_Vm_MsgRun: @unchecked Sendable {}
extension Gno_Vm_MemPackage: @unchecked Sendable {}
extension Gno_Vm_MemFile: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "gno.vm"

extension Gno_Vm_MsgCall: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgCall"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "caller"),
    2: .same(proto: "send"),
    3: .standard(proto: "max_deposit"),
    4: .standard(proto: "pkg_path"),
    5: .same(proto: "func"),
    6: .same(proto: "args"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.caller) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.send) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.maxDeposit) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.pkgPath) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.`func`) }()
      case 6: try { try decoder.decodeRepeatedStringField(value: &self.args) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.caller.isEmpty {
      try visitor.visitSingularStringField(value: self.caller, fieldNumber: 1)
    }
    if !self.send.isEmpty {
      try visitor.visitSingularStringField(value: self.send, fieldNumber: 2)
    }
    if !self.maxDeposit.isEmpty {
      try visitor.visitSingularStringField(value: self.maxDeposit, fieldNumber: 3)
    }
    if !self.pkgPath.isEmpty {
      try visitor.visitSingularStringField(value: self.pkgPath, fieldNumber: 4)
    }
    if !self.`func`.isEmpty {
      try visitor.visitSingularStringField(value: self.`func`, fieldNumber: 5)
    }
    if !self.args.isEmpty {
      try visitor.visitRepeatedStringField(value: self.args, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Gno_Vm_MsgCall, rhs: Gno_Vm_MsgCall) -> Bool {
    if lhs.caller != rhs.caller {return false}
    if lhs.send != rhs.send {return false}
    if lhs.maxDeposit != rhs.maxDeposit {return false}
    if lhs.pkgPath != rhs.pkgPath {return false}
    if lhs.`func` != rhs.`func` {return false}
    if lhs.args != rhs.args {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Gno_Vm_MsgAddPackage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgAddPackage"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "creator"),
    2: .same(proto: "package"),
    3: .same(proto: "send"),
    4: .standard(proto: "max_deposit"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.creator) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._package) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.send) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.maxDeposit) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.creator.isEmpty {
      try visitor.visitSingularStringField(value: self.creator, fieldNumber: 1)
    }
    try { if let v = self._package {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if !self.send.isEmpty {
      try visitor.visitSingularStringField(value: self.send, fieldNumber: 3)
    }
    if !self.maxDeposit.isEmpty {
      try visitor.visitSingularStringField(value: self.maxDeposit, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Gno_Vm_MsgAddPackage, rhs: Gno_Vm_MsgAddPackage) -> Bool {
    if lhs.creator != rhs.creator {return false}
    if lhs._package != rhs._package {return false}
    if lhs.send != rhs.send {return false}
    if lhs.maxDeposit != rhs.maxDeposit {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Gno_Vm_MsgRun: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgRun"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "caller"),
    2: .same(proto: "send"),
    3: .standard(proto: "max_deposit"),
    4: .same(proto: "package"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.caller) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.send) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.maxDeposit) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._package) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.caller.isEmpty {
      try visitor.visitSingularStringField(value: self.caller, fieldNumber: 1)
    }
    if !self.send.isEmpty {
      try visitor.visitSingularStringField(value: self.send, fieldNumber: 2)
    }
    if !self.maxDeposit.isEmpty {
      try visitor.visitSingularStringField(value: self.maxDeposit, fieldNumber: 3)
    }
    try { if let v = self._package {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Gno_Vm_MsgRun, rhs: Gno_Vm_MsgRun) -> Bool {
    if lhs.caller != rhs.caller {return false}
    if lhs.send != rhs.send {return false}
    if lhs.maxDeposit != rhs.maxDeposit {return false}
    if lhs._package != rhs._package {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Gno_Vm_MemPackage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MemPackage"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "path"),
    3: .same(proto: "files"),
    4: .same(proto: "type"),
    5: .same(proto: "info"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.path) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.files) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._type) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._info) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.path.isEmpty {
      try visitor.visitSingularStringField(value: self.path, fieldNumber: 2)
    }
    if !self.files.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.files, fieldNumber: 3)
    }
    try { if let v = self._type {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._info {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Gno_Vm_MemPackage, rhs: Gno_Vm_MemPackage) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.path != rhs.path {return false}
    if lhs.files != rhs.files {return false}
    if lhs._type != rhs._type {return false}
    if lhs._info != rhs._info {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Gno_Vm_MemFile: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MemFile"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "body"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.body) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.body.isEmpty {
      try visitor.visitSingularStringField(value: self.body, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Gno_Vm_MemFile, rhs: Gno_Vm_MemFile) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.body != rhs.body {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
